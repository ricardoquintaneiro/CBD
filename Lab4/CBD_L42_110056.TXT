// NMEC: 110056

#1 Encontre todos os atores que dirigiram um filme em que também atuaram e apresente o nome do ator e o título do filme.
MATCH (people:Person)-[:DIRECTED]->(movie:Movie)<-[:ACTED_IN]-(people) 
RETURN people

# 2. Para cada filme realizado depois de 2005, apresente os nomes de todos os atores que atuaram nesse filme.
MATCH (movies:Movie)<-[:ACTED_IN]-(actors:Person)
WHERE movies.released > 2005
RETURN actors.name

# 3. Encontre pares de nós com mais do que uma relação entre si.
MATCH (a)-[r]->(b)
WITH a, b, count(r) AS count
WHERE count > 1
RETURN a, b

# 4. Encontre todos os pares de pessoas que fizeram revisões do mesmo filme. Apresente os seus nomes e título de cada filme.
MATCH (person1:Person)-[:REVIEWED]->(movie:Movie)<-[:REVIEWED]-(person2:Person)
WHERE person1 > person2
RETURN person1.name, person2.name, movie.title

# 5. Encontre todos os pares de atores que atuaram em vários filmes juntos.
MATCH (actor1:Person)-[:ACTED_IN]->(movie:Movie)<-[:ACTED_IN]-(actor2:Person)
WITH actor1, actor2, count(movie) AS count
WHERE count > 1
RETURN actor1.name, actor2.name

# 6. Determine a idade média do elenco do filme "Apollo 13" no ano do lançamento do filme.
MATCH (actors:Person)-[:ACTED_IN]->(movie:Movie {title: "Apollo 13"})
RETURN movie.title, avg(movie.released - actors.born)

# 7. Encontre os 10 filmes com o elenco mais velho no momento do lançamento do filme. Apresente o filme e a idade média arredondada a 2 casas decimais, por ordem decrescente.
MATCH (actors:Person)-[:ACTED_IN]->(movies:Movie)
WITH movies, avg(movies.released - actors.born) AS idadeMediaElenco
ORDER BY idadeMediaElenco DESC
LIMIT 10
RETURN movies.title, round(idadeMediaElenco, 2)

# 8. Apresente o subgrafo ACTED_IN do filme com o elenco mais novo, no momento do lançamento do filme.
MATCH (actors:Person)-[:ACTED_IN]->(movies:Movie)
WITH movies, avg(movies.released - actors.born) AS idadeMediaElenco
ORDER BY idadeMediaElenco ASC
LIMIT 1
MATCH (actors:Person)-[:ACTED_IN]->(movies:Movie {title: movies.title})
RETURN actors, movies

# 9. Qual é o caminho mais curto (usando qualquer tipo de relação) entre John Cusack e Demi Moore?
MATCH path=shortestPath((john:Person {name: "John Cusack"})-[*]-(demi:Person {name: "Demi Moore"}))
RETURN path

# 10. Qual a dimensão caminho mais curto (usando qualquer tipo de relação) entre Keanu Reeves e Tom Cruise?
MATCH path=shortestPath((keanu:Person {name: "Keanu Reeves"})-[*]-(cruise:Person {name: "Tom Cruise"}))
RETURN length(path)

# 11. Quais são as dimensões do caminho mais curto entre pessoas com nome Jim e pessoas com nome Kevin?
MATCH path=shortestPath((jims:Person WHERE jims.name STARTS WITH "Jim")-[*]-(kevins:Person WHERE kevins.name STARTS WITH "Kevin"))
WITH length(path) AS length
ORDER BY length ASC
LIMIT 1
RETURN length

# 12. Que pessoas têm uma distância 2 para Jim Cash (a distância entre duas pessoas é o comprimento do caminho mais curto entre eles)?
MATCH path=shortestPath((cash:Person {name: "Jim Cash"})-[*1..2]-(person:Person WHERE person <> cash))
WHERE length(path) = 2
RETURN person

# 13. Qual é a maior distância de uma pessoa para Kevin Bacon?
MATCH path=shortestPath((kevin: Person {name: "Kevin Bacon"})-[*]-(person:Person WHERE kevin <> person))
RETURN length(path)
ORDER BY length(path) DESC
LIMIT 1

# 14. Qual é a maior distância entre duas pessoas?
MATCH path=shortestPath((p1: Person)-[*]-(p2:Person WHERE p1 > p2))
RETURN length(path)
ORDER BY length(path) DESC
LIMIT 1

# 15. Qual é a distribuição de distâncias em pares (isto é, para a distância 1, 2, 3, ..., quantos pares de pessoas têm essa distância um do outro)?
MATCH path=shortestPath((p1: Person)-[*]-(p2:Person WHERE p1 < p2))
RETURN length(path) as distances, count(length(path)) as pairs
ORDER BY length(path) DESC

# 16. Indique as 10 pessoas com menor distância média em que o caminho entre elas são relações do tipo ACTED_IN.
MATCH path=shortestPath((p1: Person)-[:ACTED_IN*]-(p2:Person WHERE p1 <> p2))
RETURN p1 as ator, avg(length(path)) AS distanciaMediaAtores
ORDER BY distanciaMediaAtores ASC
LIMIT 10

# 17. Apresente os atores que tiveram pelo menos uma role para personagens com o prefixo 'Dr.'. O resultado deve ser uma lista com o par “Ator, Lista das roles”.
MATCH (actors:Person)-[r:ACTED_IN]->(movies:Movie)
WHERE ANY(role IN r.roles WHERE role STARTS WITH "Dr.")
WITH actors, COLLECT(DISTINCT [role IN r.roles WHERE role STARTS WITH "Dr."]) AS drRoles
RETURN [actors.name, REDUCE(s = [], roleList IN drRoles | s + roleList)] AS actorsAsDoctors

# 18. Descubra os atores que representaram em pelo menos três filmes dirigidos pelo mesmo realizador.
MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WITH actor, director, COUNT(DISTINCT movie) AS moviesCount
WHERE moviesCount >= 3
RETURN actor.name, director.name, moviesCount

# 19. Encontre o realizador que trabalhou com mais atores únicos.
MATCH (director:Person)-[:DIRECTED]->(movie:Movie)<-[:ACTED_IN]-(actor:Person)
WITH director, COUNT(DISTINCT actor) AS uniqueActorsCount
ORDER BY uniqueActorsCount DESC
LIMIT 1
RETURN director.name, uniqueActorsCount

# 20. Liste os atores que representaram em filmes dirigidos por mais de um realizador. Apresente o nome do ator e os realizadores distintos com quem trabalhou nesses filmes.
MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WITH actor, COLLECT(DISTINCT director.name) AS uniqueDirectors
WHERE size(uniqueDirectors) > 1
RETURN actor.name, uniqueDirectors
